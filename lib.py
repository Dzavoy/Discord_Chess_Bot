#Define the border of the board values based on emojis names
border = {
    "A": "wA",
    "B": "wB",
    "C": "wC",
    "D": "wD",
    "E": "wE",
    "F": "wF",
    "G": "wG",
    "H": "wH",
    "1": "w1",
    "2": "w2",
    "3": "w3",
    "4": "w4",
    "5": "w5",
    "6": "w6",
    "7": "w7",
    "8": "w8",
    "corner": "wsb"
}

#Define the pieces values based on emojis names
pieces = {
    "black": {
        "square": "bbg",
        "pawn": "bpawn",
        "rook": "brook",
        "knight": "bknight",
        "bishop": "bbishop",
        "queen": "bqueen",
        "king": "bking",
    },
    
    "white": {
        "square": "wbg",
        "pawn": "wpawn",
        "rook": "wrook",
        "knight": "wknight",
        "bishop": "wbishop",
        "queen": "wqueen",
        "king": "wking"
    }
}

def board(r: int, c: int) -> str:
    if (r + c) % 2 == 1:
        return pieces["black"]["square"]
    return pieces["white"]["square"]

#Build the board
def build_board() -> list[list[str]]:
    board_list = []
    for r in range(8):
        line = []
        for c in range(8):
            line.append(board(r, c))
        board_list.append(line)

    return board_list

#pieces[cor][peca] + pieces[cor][square]
#Place pieces on the board generated by the build_board function
def generate_chessboard() -> list[list[str]]:
    board_list = build_board()

    board_list[1] = [pieces["black"]["pawn"] + board_list[1][c] for c in range(8)]
    board_list[6] = [pieces["white"]["pawn"] + board_list[6][c] for c in range(8)]

    pieces_order = ["rook", "knight", "bishop", "queen", "king", "bishop", "knight", "rook"]
    for i in range(8):
        board_list[0][i] = pieces["black"][pieces_order[i]] + board_list[0][i]
        board_list[7][i] = pieces["white"][pieces_order[i]] + board_list[7][i]

    return board_list

#Convert the matrix coordinate to chess board coordinate
def convert_coordinate(c: str, r: int) -> str:
    c_mapper = {chr(97 + i): 0 + i for i in range(8)}
    return c_mapper[c], 8 - r

#Move a piece in the board
def move_piece(sc: str, sr: int, dc: str, dr: int, board_list: list) -> list[list[str]]:
    sc, sr = convert_coordinate(sc, sr)
    dc, dr = convert_coordinate(dc, dr)

    d_square = board(dc, dr)
    s_square = board(sc, sr)

    d_piece = board_list[dr][dc].replace(d_square, "")
    s_piece = board_list[sr][sc].replace(s_square, "")

    board_list[dr][dc] = s_piece + d_square
    board_list[sr][sc] = s_square
    return board_list

def board_to_fen(board: list[list[str]], turn: str = 'w') -> str:
    piece_map = {
        'wpawn': 'P', 'wrook': 'R', 'wknight': 'N',
        'wbishop': 'B', 'wqueen': 'Q', 'wking': 'K',
        'bpawn': 'p', 'brook': 'r', 'bknight': 'n',
        'bbishop': 'b', 'bqueen': 'q', 'bking': 'k'
    }
    
    fen_rows = []
    for r in reversed(range(8)): #FEN starts from rank 8
        fen = ''
        empty = 0
        for c in range(8):
            cell = board[r][c]
            #Extract piece (split on first occurrence of background)
            piece = cell.split('wbg')[0].split('bbg')[0]
            
            if piece in piece_map:
                if empty > 0:
                    fen += str(empty)
                    empty = 0
                fen += piece_map[piece]
            else:
                empty += 1
        if empty > 0:
            fen += str(empty)
        fen_rows.append(fen)
    
    return '/'.join(fen_rows) + f' {turn} - - 0 1'

def get_coordinates(move: str) -> tuple:
    #Convert Stockfish move to your coordinate format
    src = move[:2]
    dest = move[2:]
    return (src[0].lower(), int(src[1])), (dest[0].lower(), int(dest[1]))

#Format the board to send in the discord channel    
def format_chessboard(board_list: list, emoji_map: dict, border: dict) -> str:
    #Convert board to proper emoji format with borders
    formatted = []
    
    #Add numbered ranks
    for i, row in enumerate(board_list):
        rank_num = str(8 - i)
        rank_emoji = emoji_map.get(border[rank_num], '⬛')
        line = [rank_emoji] + [emoji_map.get(cell, '⬛') for cell in row]
        formatted.append(' '.join(line))
    
    #Add file letters
    bottom_line = [emoji_map.get(border["corner"], '⬛')]
    for letter in "ABCDEFGH":
        bottom_line.append(emoji_map.get(border[letter], '⬛'))
    formatted.append(' '.join(bottom_line))
    
    return '\n'.join(formatted)